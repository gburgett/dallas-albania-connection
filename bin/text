#! /usr/bin/env node --require ts-node/register

const {google} = require('googleapis');
const fs = require('fs-extra');
const yargs = require('yargs');
const readline = require('readline');
const { Readable, Writable } = require('stream');

const {loadAuth} = require('../src/lambda/common/auth');

const argv = yargs
  .usage("$0 [options] <message>")
  .option('override', {
    describe: 'A set of phone numbers to use instead of downloading from the google sheet.'
  })
  .argv

let message = argv._.join(' ').trim()
let isStdin = false
if (!message || message.length == 0 || message == '-') {
  message = (fs.readFileSync(0, 'utf8')).toString()
  isStdin = true;
} else if (fs.existsSync(message)) {
  message = (fs.readFileSync(message)).toString()
}

Run()
  .then((code) => process.exit(code || 0))
  .catch((err) => {
    console.error(err)
  })

async function Run() {
  let numbers

  if (argv.override) {
    numbers = argv.override.split(',')
  }

  if (!numbers || numbers.length == 0) {
    const auth = await loadAuth([
      'https://www.googleapis.com/auth/drive',
      'https://www.googleapis.com/auth/drive.file',
      'https://www.googleapis.com/auth/spreadsheets',
    ])

    const sheets = google.sheets({
      version: 'v4',
      auth
    });

    const got = await sheets.spreadsheets.values.get({
      spreadsheetId: '1zPr4lam-rZihE7_gtSmWrEK6nROLemZep6h34w33gPE',
      range: 'A1:A'
    });

    if (!got.data.values || got.data.values.length == 0) {
      console.log('No numbers to message')
    }
    numbers = got.data.values.flat()
    if (numbers.length == 0) {
      console.log('No numbers to message')
    }
  }

  if ( !await prompt(numbers.length, message) ) {
    console.error('Cancelled')
    return -1;
  }
  
  await new Promise((resolve, reject) => {
    const stream = toReadable(numbers)
      .pipe(writeToTwilio(message))

    stream.on('finish', () => {
      resolve()
    })
    stream.on('error', (err) => {
      reject(new Error(err))
    })
  })
}

function prompt(contactCount, message) {
  const rl = readline.createInterface(process.stdin, process.stdout);
  const numSMS = Math.ceil(message.length / 140)
  const smsCost = contactCount * numSMS * 0.0075;
  const costFormatted = (Math.ceil(smsCost * 100) / 100).toFixed(2)

  console.log(`'${message}' (${numSMS} segments)`)
  console.log('send to', contactCount, 'contacts')

  if (isStdin) {
    console.log(`expected cost: $${costFormatted}`)
    return Promise.resolve(true);
  }

  console.log(`This will cost approximately $${costFormatted}`)

  return new Promise((resolve, reject) => {
    rl.question('Continue? [y/n]: ', (answer) => {
      if (answer[0] == 'y') {
        resolve(true)
      } else {
        resolve(false)
      }
    })
  })
}

function toReadable(entries) {
  let index = 0;
  return new Readable({
    read: function(size) {
      if(index >= entries.length) {
        // eof
        this.push(null)
      }
      while(index < entries.length){
        if (!this.push(entries[index++])) {
          break
        }
      }
    }
  })
}

const accountSid = process.env.TWILIO_ACCOUNT_ID;
const authToken = process.env.TWILIO_API_KEY;
const twilio = require('twilio')(accountSid, authToken);
const fromNumber = process.env.TWILIO_FROM_NUMBER;
if (!fromNumber || fromNumber.length == 0) {
  throw new Error("Please set TWILIO_FROM_NUMBER")
}

function writeToTwilio(body) {
  return new Writable({
    objectMode: true,
    highWaterMark: 0,
    write(chunk, encoding, callback) {
      const to = chunk.toString()
      console.log('sending', `'${body}'`, 'from', fromNumber, 'to', to)
      twilio.messages.create({
        from: fromNumber,
        to: to,
        body: body
      })
        .catch((err) => callback(err))
        .then((message) => {
          console.log('sent to', message.to)
          callback(null, to)
        })
        .done()
    }
  });
}

